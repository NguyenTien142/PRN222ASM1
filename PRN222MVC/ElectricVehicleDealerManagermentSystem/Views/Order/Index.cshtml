@model IEnumerable<BusinessObject.BusinessObject.OrderModels.Respond.GetOrdersResponseDto>

@{
    ViewData["Title"] = "Order List";
    Layout = "~/Views/Shared/Staff_Layout.cshtml";
}

<div class="container mt-4">
    <div class="row mb-3">
        <div class="col-md-6">
            <h2>Order List</h2>
        </div>
        <div class="col-md-6 text-end">
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Create New
            </a>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" class="form-control" placeholder="Search by customer name..." id="orderSearch" onkeyup="filterOrders()" />
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover" id="orderTable">
            <thead class="table-dark">
                <tr>
                    <th>Order Id</th>
                    <th>Order Date</th>
                    <th>Total Amount</th>
                    <th>Status</th>
                    <th>Customer Name</th>
                    <th style="width:90px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.OrderId</td>
                        <td>@item.OrderDate.ToString("yyyy-MM-dd")</td>
                        <td>@String.Format("{0:N0}", item.TotalAmount) VND</td>
                        <td>
                            <select class="form-select form-select-sm order-status-dropdown" data-order-id="@item.OrderId" @(item.Status == "Pending" ? "" : "disabled")>
                                <option value="Pending" selected="@(item.Status == "Pending" ? "selected" : null)">Pending</option>
                                <option value="Payed" selected="@(item.Status == "Payed" ? "selected" : null)">Payed</option>
                                <option value="Cancel" selected="@(item.Status == "Cancel" ? "selected" : null)">Cancel</option>
                            </select>
                        </td>
                        <td>@item.CustomerName</td>
                        <td>
                            <a asp-action="Details" asp-route-id="@item.OrderId" class="btn btn-sm btn-info" title="Details">
                                <i class="bi bi-info-circle"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal for Confirming Status Update -->
<div class="modal fade" id="confirmUpdateModal" tabindex="-1" aria-labelledby="confirmUpdateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmUpdateModalLabel">Confirm Status Update</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to update the status of this order?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmUpdateButton">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let selectedOrderId = null;
        let selectedStatus = null;

        function filterOrders() {
            var input = document.getElementById('orderSearch');
            var filter = input.value.toLowerCase();
            var table = document.getElementById('orderTable');
            var trs = table.getElementsByTagName('tr');
            for (var i = 1; i < trs.length; i++) {
                var tds = trs[i].getElementsByTagName('td');
                var customerName = tds[4]?.textContent.toLowerCase() || "";
                trs[i].style.display = customerName.indexOf(filter) > -1 ? '' : 'none';
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.order-status-dropdown').forEach(function (dropdown) {
                dropdown.addEventListener('change', function () {
                    selectedOrderId = this.getAttribute('data-order-id');
                    selectedStatus = this.value;

                    // Show the confirmation modal
                    var confirmModal = new bootstrap.Modal(document.getElementById('confirmUpdateModal'));
                    confirmModal.show();
                });
            });

            document.getElementById('confirmUpdateButton').addEventListener('click', function () {
                if (selectedOrderId && selectedStatus) {
                    fetch('/Order/UpdateOrderStatus?orderId=' + selectedOrderId + '&status=' + selectedStatus, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name=__RequestVerificationToken]')?.value
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Order status updated successfully.');
                            location.reload();
                        } else {
                            alert('Failed to update order status: ' + (data.message || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        alert('Error updating order status.');
                    });
                }
            });
        });
    </script>
}