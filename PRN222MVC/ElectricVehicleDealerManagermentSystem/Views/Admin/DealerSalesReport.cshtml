@{
    ViewData["Title"] = "Dealer Sales Report - Admin";
    Layout = "Admin_Layout";

    // Cast dynamic ViewBag values to nullable DateTime to avoid runtime binder errors
    DateTime? startDate = ViewBag.StartDate as DateTime?;
    DateTime? endDate = ViewBag.EndDate as DateTime?;

    // Summary (still dynamic, check null before using its properties)
    var summary = ViewBag.Summary;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="welcome-section mb-4">
                <div class="card border-0 bg-gradient-primary text-white shadow-sm">
                    <div class="card-body py-4">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <div class="welcome-icon me-3">
                                    <i class="bi bi-graph-up fs-1"></i>

            <!-- Header Section -->
            <div class="welcome-section mb-4">
                <div class="card border-0 bg-gradient-primary text-white shadow-sm">
                    <div class="card-body py-4">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <div class="welcome-icon me-3">
                                    <i class="bi bi-graph-up fs-1"></i>
                                </div>
                                <div>
                                    <h2 class="mb-1 fw-bold">Dealer Sales Report</h2>
                                    <p class="mb-0 opacity-75">Performance analysis for DealerStaff members</p>
                                </div>
                            </div>
                            <div class="text-end">
                                <small class="opacity-75">Admin Dashboard</small>
                                <br>
                                <span class="fw-medium">@ViewBag.Username</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Summary Cards -->
            <div class="row g-4 mb-4">
                <div class="col-xl-3 col-md-6">
                    <div class="card bg-primary text-white h-100 shadow-sm">
                        <div class="card-body text-center">
                            <div class="mb-3">
                                <i class="bi bi-building fs-1"></i>
                            </div>
                            <h6 class="card-title text-uppercase fw-medium">Total DealerStaff</h6>
                            <h2 class="mb-0 fw-bold" id="totalDealers">@((summary != null && summary.TotalDealers != null) ? summary.TotalDealers.ToString() : "0")</h2>
                            <small class="opacity-75">Active members</small>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6">
                    <div class="card bg-success text-white h-100 shadow-sm">
                        <div class="card-body text-center">
                            <div class="mb-3">
                                <i class="bi bi-receipt fs-1"></i>
                            </div>
                            <h6 class="card-title text-uppercase fw-medium">Total Orders</h6>
                            <h2 class="mb-0 fw-bold" id="totalOrders">@((summary != null && summary.TotalOrders != null) ? summary.TotalOrders.ToString() : "0")</h2>
                            <small class="opacity-75">All time</small>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6">
                    <div class="card bg-warning text-white h-100 shadow-sm">
                        <div class="card-body text-center">
                            <div class="mb-3">
                                <i class="bi bi-currency-dollar fs-1"></i>
                            </div>
                            <h6 class="card-title text-uppercase fw-medium">Total Earnings</h6>
                            <h2 class="mb-0 fw-bold" id="totalEarnings">
                                @(
                                                (summary != null && summary.TotalEarnings != null)
                                                ? String.Format("{0:C}", summary.TotalEarnings)
                                                : "$0.00"
                                                )
                            </h2>
                            <small class="opacity-75">Revenue generated</small>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6">
                    <div class="card bg-info text-white h-100 shadow-sm">
                        <div class="card-body text-center">
                            <div class="mb-3">
                                <i class="bi bi-calendar fs-1"></i>
                            </div>
                            <h6 class="card-title text-uppercase fw-medium">Report Date</h6>
                            <h2 class="mb-0 fw-bold" id="reportDate">
                                @if (startDate.HasValue || endDate.HasValue)
                                {
                                    if (startDate.HasValue && endDate.HasValue)
                                    {
                                        @(startDate.Value.ToString("dd/MM/yyyy") + " - " + endDate.Value.ToString("dd/MM/yyyy"))
                                    }
                                    else if (startDate.HasValue)
                                    {
                                        @("From " + startDate.Value.ToString("dd/MM/yyyy"))
                                    }
                                    else
                                    {
                                        @("Until " + endDate.Value.ToString("dd/MM/yyyy"))
                                    }
                                }
                                else
                                {
                                    @(
                                                    (summary != null && summary.ReportGeneratedDate != null)
                                                    ? summary.ReportGeneratedDate.ToString("dd/MM/yyyy")
                                                    : "-"
                                                    )
                                                }
                            </h2>
                            <small class="opacity-75">@((startDate.HasValue || endDate.HasValue) ? "Filtered period" : "Last updated")</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Dealer Sales Report Table -->
            <div class="row">
                <div class="col-12">
                    <div class="card shadow-sm border-0">
                        <div class="card-header bg-white border-bottom-0 py-3">
                            <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                                <h5 class="card-title mb-0 fw-bold text-dark">
                                    <i class="bi bi-table me-2 text-primary"></i>DealerStaff Performance Details
                                </h5>
                                <div class="d-flex gap-2 align-items-center flex-wrap">
                                    <!-- Date Filter -->
                                    <div class="d-flex gap-2 align-items-center">
                                        <label for="startDate" class="form-label mb-0 me-2 fw-medium">From:</label>
                                        <input type="date" class="form-control form-control-sm" id="startDate" style="width: 150px;">

                                        <label for="endDate" class="form-label mb-0 me-2 fw-medium">To:</label>
                                        <input type="date" class="form-control form-control-sm" id="endDate" style="width: 150px;">

                                        <button class="btn btn-outline-primary btn-sm px-3" onclick="filterByDate()">
                                            <i class="bi bi-funnel me-1"></i>Filter
                                        </button>
                                    </div>

                                    <div class="input-group input-group-sm" style="width: 250px;">
                                        <span class="input-group-text bg-light border-end-0"><i class="bi bi-search"></i></span>
                                        <input type="text" class="form-control border-start-0" id="dealerSearch" placeholder="Search DealerStaff...">
                                    </div>
                                    <button class="btn btn-primary btn-sm px-3" onclick="refreshReport()" id="refreshBtn">
                                        <i class="bi bi-arrow-clockwise me-1"></i>Refresh
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <div id="tableLoading" class="d-none text-center py-5">
                                    <div class="spinner-border text-primary" role="status">
                                    </div>
                                    <div class="mt-2 text-muted">Loading DealerStaff sales report data...</div>
                                </div>
                                <table class="table table-hover mb-0" id="dealerSalesTable">
                                    <thead class="bg-light">
                                        <tr>
                                            <th class="border-0 fw-bold text-dark ps-4 py-3">DealerStaff Name</th>
                                            <th class="border-0 fw-bold text-dark py-3">Type</th>
                                            <th class="border-0 fw-bold text-dark py-3">Address</th>
                                            <th class="border-0 fw-bold text-dark py-3 text-center">Total Orders</th>
                                            <th class="border-0 fw-bold text-dark py-3 text-center">Successful</th>
                                            <th class="border-0 fw-bold text-dark py-3 text-center">Pending</th>
                                            <th class="border-0 fw-bold text-dark py-3 text-end pe-4">Total Earnings</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (ViewBag.DealerReports != null)
                                        {
                                            foreach (var report in ViewBag.DealerReports)
                                            {
                                                @if (report != null)
                                                {
                                                    <tr class="align-middle">
                                                        <td class="ps-4 py-3">
                                                            <span class="fw-medium text-dark">@(!string.IsNullOrEmpty(report?.DealerName) ? report.DealerName : "")</span>
                                                        </td>
                                                        <td class="py-3">
                                                            <span class="badge bg-primary">@(!string.IsNullOrEmpty(report?.DealerType) ? report.DealerType : "N/A")</span>
                                                        </td>
                                                        <td class="py-3 text-muted">@(report?.DealerAddress ?? "")</td>
                                                        <td class="py-3 text-center">
                                                            <span class="badge bg-secondary">@((report?.TotalOrders != null) ? report.TotalOrders.ToString() : "0")</span>
                                                        </td>
                                                        <td class="py-3 text-center">
                                                            <span class="badge bg-success">@((report?.SuccessfulOrders != null) ? report.SuccessfulOrders.ToString() : "0")</span>
                                                        </td>
                                                        <td class="py-3 text-center">
                                                            <span class="badge bg-warning">@((report?.PendingOrders != null) ? report.PendingOrders.ToString() : "0")</span>
                                                        </td>
                                                        <td class="py-3 text-end pe-4">
                                                            <span class="fw-bold text-success">@((report?.TotalEarnings != null) ? String.Format("{0:C}", report.TotalEarnings) : String.Format("{0:C}", 0))</span>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="7" class="text-center py-5">
                                                    <div class="d-flex flex-column align-items-center">
                                                        <i class="bi bi-graph-down fs-1 text-muted mb-2"></i>
                                                        <span class="text-muted">No DealerStaff sales data available</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script>
        function filterByDate() {
            var startDate = $('#startDate').val();
            var endDate = $('#endDate').val();

            // Show loading state
            $('#refreshBtn').html('<i class="bi bi-hourglass-split me-1"></i>Filtering...');
            $('#refreshBtn').prop('disabled', true);
            $('#tableLoading').removeClass('d-none');
            $('#dealerSalesTable').addClass('d-none');

            // Build URL with date parameters
            var url = '@Url.Action("GetDealerSalesReportData", "Admin")';
            if (startDate || endDate) {
                url += '?';
                if (startDate) url += 'startDate=' + startDate;
                if (endDate) url += (startDate ? '&' : '') + 'endDate=' + endDate;
            }

            $.ajax({
                url: url,
                type: 'GET',
                success: function(response) {
                    if (response.success) {
                        updateReportTable(response.data, response.summary);
                        showSuccessToast('Report filtered successfully');
                    } else {
                        showErrorToast(response.message || 'Failed to filter report');
                    }
                },
                error: function() {
                    showErrorToast('Error filtering report');
                },
                complete: function() {
                    // Reset button state and hide loading
                    $('#refreshBtn').html('<i class="bi bi-arrow-clockwise me-1"></i>Refresh');
                    $('#refreshBtn').prop('disabled', false);
                    $('#tableLoading').addClass('d-none');
                    $('#dealerSalesTable').removeClass('d-none');
                }
            });
        }

        function refreshReport() {
            // Clear date filters and refresh
            $('#startDate').val('');
            $('#endDate').val('');
            filterByDate();
        }

        // Search functionality
        $('#dealerSearch').on('keyup', function() {
            var searchTerm = $(this).val().toLowerCase();
            $('#dealerSalesTable tbody tr').each(function() {
                var dealerName = $(this).find('td:first .fw-medium').text().toLowerCase();
                if (dealerName.includes(searchTerm)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        function updateReportTable(data, summary) {
            // Update summary cards
            if (summary) {
                $('#totalDealers').text(summary.totalDealers || 0);
                $('#totalOrders').text(summary.totalOrders || 0);
                $('#totalEarnings').text('$' + (summary.totalEarnings || 0).toLocaleString());

                // Update report date display
                var startDate = '@(startDate.HasValue? startDate.Value.ToString("yyyy-MM-dd") : "")';
                var endDate = '@(endDate.HasValue? endDate.Value.ToString("yyyy-MM-dd") : "")';

                if (startDate || endDate) {
                    if (startDate && endDate) {
                        $('#reportDate').text(formatDate(startDate) + ' - ' + formatDate(endDate));
                    } else if (startDate) {
                        $('#reportDate').text('From ' + formatDate(startDate));
                    } else {
                        $('#reportDate').text('Until ' + formatDate(endDate));
                    }
                    $('#reportDate').attr('title', 'Filtered period');
                } else if (summary.reportGeneratedDate) {
                    $('#reportDate').text(formatDateFromISO(summary.reportGeneratedDate));
                    $('#reportDate').attr('title', 'Last updated');
                }
            }

            // Update table body
            var tbody = $('#dealerSalesTable tbody');
            tbody.empty();

            if (data && data.length > 0) {
                data.forEach(function(dealer) {
                    var row = `
                        <tr class="align-middle">
                            <td class="ps-4 py-3">
                                <span class="fw-medium text-dark">${dealer.dealerName || ''}</span>
                            </td>
                            <td class="py-3">
                                <span class="badge bg-primary">${dealer.dealerType || 'N/A'}</span>
                            </td>
                            <td class="py-3 text-muted">${dealer.dealerAddress || ''}</td>
                            <td class="py-3 text-center">
                                <span class="badge bg-secondary">${dealer.totalOrders || 0}</span>
                            </td>
                            <td class="py-3 text-center">
                                <span class="badge bg-success">${dealer.successfulOrders || 0}</span>
                            </td>
                            <td class="py-3 text-center">
                                <span class="badge bg-warning">${dealer.pendingOrders || 0}</span>
                            </td>
                            <td class="py-3 text-end pe-4">
                                <span class="fw-bold text-success">$${(dealer.totalEarnings || 0).toLocaleString()}</span>
                            </td>
                        </tr>
                    `;
                    tbody.append(row);
                });
            } else {
                tbody.append(`
                    <tr>
                        <td colspan="7" class="text-center py-5">
                            <div class="d-flex flex-column align-items-center">
                                <i class="bi bi-graph-down fs-1 text-muted mb-2"></i>
                                <span class="text-muted">No DealerStaff sales data available</span>
                            </div>
                        </td>
                    </tr>
                `);
            }

            // Hide loading and show table
            $('#tableLoading').addClass('d-none');
            $('#dealerSalesTable').removeClass('d-none');
        }

        function viewDealerDetails(dealerName) {
            // Implementation for viewing dealer details
            showInfoToast('Feature coming soon: View dealer details for ' + dealerName);
        }

        function viewDealerOrders(dealerName) {
            // Implementation for viewing dealer orders
            showInfoToast('Feature coming soon: View orders for ' + dealerName);
        }

        function showSuccessToast(message) {
            // Create toast element
            var toastHtml = `
                <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="bi bi-check-circle me-2"></i>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            // Add to toast container or create one
            var container = $('.toast-container');
            if (container.length === 0) {
                $('body').append('<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>');
                container = $('.toast-container');
            }

            container.append(toastHtml);

            // Show toast
            var toast = container.find('.toast:last-child');
            var bsToast = new bootstrap.Toast(toast[0]);
            bsToast.show();

            // Remove after 3 seconds
            setTimeout(() => {
                bsToast.hide();
                toast.remove();
            }, 3000);
        }

        function showErrorToast(message) {
            // Create toast element
            var toastHtml = `
                <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="bi bi-exclamation-triangle me-2"></i>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            // Add to toast container or create one
            var container = $('.toast-container');
            if (container.length === 0) {
                $('body').append('<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>');
                container = $('.toast-container');
            }

            container.append(toastHtml);

            // Show toast
            var toast = container.find('.toast:last-child');
            var bsToast = new bootstrap.Toast(toast[0]);
            bsToast.show();

            // Remove after 5 seconds for errors
            setTimeout(() => {
                bsToast.hide();
                toast.remove();
            }, 5000);
        }

        function showInfoToast(message) {
            // Create toast element
            var toastHtml = `
                <div class="toast align-items-center text-white bg-info border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="bi bi-info-circle me-2"></i>${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;

            // Add to toast container or create one
            var container = $('.toast-container');
            if (container.length === 0) {
                $('body').append('<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>');
                container = $('.toast-container');
            }

            container.append(toastHtml);

            // Show toast
            var toast = container.find('.toast:last-child');
            var bsToast = new bootstrap.Toast(toast[0]);
            bsToast.show();

            // Remove after 3 seconds
            setTimeout(() => {
                bsToast.hide();
                toast.remove();
            }, 3000);
        }

        // Auto refresh every 5 minutes
        setInterval(refreshReport, 300000);

        // Helper function to format date from yyyy-MM-dd to dd/MM/yyyy
        function formatDate(dateString) {
            if (!dateString) return '';
            var parts = dateString.split('-');
            if (parts.length === 3) {
                return parts[2] + '/' + parts[1] + '/' + parts[0];
            }
            return dateString;
        }

        // Helper function to format ISO date string to dd/MM/yyyy
        function formatDateFromISO(isoString) {
            if (!isoString || isoString === '0001-01-01T00:00:00') return '';
            try {
                var date = new Date(isoString);
                if (!isNaN(date.getTime()) && date.getFullYear() > 1) {
                    return date.toLocaleDateString('vi-VN');
                }
            } catch (e) {
                console.warn('Error parsing date:', isoString, e);
            }
            return '';
        }
    </script>
}
